<?php

namespace Tests\Feature;

use App\Models\Movie;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ButtonComponentTest extends TestCase
{
    use DatabaseTransactions;

    protected mixed $user;
    protected mixed $movie;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::first();
    }

    public function test_movies_index_page(): void
    {
        $this->actingAs($this->user, 'web');
        $response = $this->get('/movies');
        $response->assertStatus(200);
    }

    public function test_movies_create_page(): void
    {
        $this->actingAs($this->user, 'web');
        $response = $this->get('/movies/create');
        $response->assertStatus(200);
    }

    public function test_movies_store_function(): void
    {
        $this->actingAs($this->user, 'web');
        $formData = [
            'title' => 'first movie test2',
            'year' => '2022',
            'imdbID' => '1234test',
            'type' => 'movie',
            'poster' => 'https://m.media-amazon.com/images/M/MV5BOTUwOTY3Mjg1MF5BMl5BanBnXkFtZTcwODI2MTAyMQ@@._V1_SX300.jpg'
        ];
        $response = $this->post('/movies', $formData);
        $response->assertStatus(200);
    }

    public function test_movies_edit_page(): void
    {
        $this->actingAs($this->user, 'web');
        $formData = [
            'title' => 'first movie test',
            'year' => '2022',
            'imdbID' => '1234test',
            'type' => 'movie',
            'poster' => 'https://m.media-amazon.com/images/M/MV5BOTUwOTY3Mjg1MF5BMl5BanBnXkFtZTcwODI2MTAyMQ@@._V1_SX300.jpg'
        ];
        $this->post('/movies', $formData);
        $movie = Movie::first();
        $response = $this->get('/movies/' . $movie->id . '/edit');
        $response->assertStatus(200);
    }

    public function test_movies_update_function(): void
    {
        $this->actingAs($this->user, 'web');
        $formData = [
            'title' => 'first movie test',
            'year' => '2022',
            'imdbID' => '1234test',
            'type' => 'movie',
            'poster' => 'https://m.media-amazon.com/images/M/MV5BOTUwOTY3Mjg1MF5BMl5BanBnXkFtZTcwODI2MTAyMQ@@._V1_SX300.jpg'
        ];
        $this->post('/movies', $formData);
        $movie = Movie::first();
        $formData = [
            'title' => 'first movie test updated',
            'year' => '2022',
            'imdbID' => '1234test',
            'type' => 'movie',
            'poster' => 'https://m.media-amazon.com/images/M/MV5BOTUwOTY3Mjg1MF5BMl5BanBnXkFtZTcwODI2MTAyMQ@@._V1_SX300.jpg'
        ];
        $response = $this->put('/movies/' . $movie->id, $formData);
        $response->assertStatus(200);
    }

    public function test_movies_delete_function(): void
    {
        $this->actingAs($this->user, 'web');
        $formData = [
            'title' => 'first movie test',
            'year' => '2022',
            'imdbID' => '1234test',
            'type' => 'movie',
            'poster' => 'https://m.media-amazon.com/images/M/MV5BOTUwOTY3Mjg1MF5BMl5BanBnXkFtZTcwODI2MTAyMQ@@._V1_SX300.jpg'
        ];
        $this->post('/movies', $formData);
        $movie = Movie::first();
        $response = $this->delete('/movies/' . $movie->id);
        $response->assertStatus(200);
    }

    public function test_fetch_data_from_button_one(): void
    {
        $this->actingAs($this->user, 'web');
        $response = $this->post('/fetch-data/BUTTON_ONE');
        $response->assertStatus(200);
    }

    public function test_fetch_data_from_button_two(): void
    {
        $this->actingAs($this->user, 'web');
        $response = $this->post('/fetch-data/BUTTON_TWO');
        $response->assertStatus(200);
    }

    public function test_fetch_data_from_button_three(): void
    {
        $this->actingAs($this->user, 'web');
        $response = $this->post('/fetch-data/BUTTON_THREE');
        $response->assertStatus(200);
    }

    public function test_movies_api_end_point()
    {
        $this->json('GET', url('api/movies'))->assertStatus(200);
    }
}
